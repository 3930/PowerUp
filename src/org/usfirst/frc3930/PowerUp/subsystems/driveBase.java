// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3930.PowerUp.subsystems;


import org.usfirst.frc3930.PowerUp.Robot;
import org.usfirst.frc3930.PowerUp.RobotMap;
import org.usfirst.frc3930.PowerUp.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.drive.RobotDriveBase;
import edu.wpi.first.wpilibj.Encoder;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.kauailabs.navx.frc.AHRS;


// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class driveBase extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	public double knife;
	private static double NORMAL_POWER = 1;
	private static double KNIFE_VALUE = 0.65;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX frontLeft = RobotMap.driveBasefrontLeft;
    private final WPI_TalonSRX backLeft = RobotMap.driveBasebackLeft;
    private final WPI_TalonSRX frontRight = RobotMap.driveBasefrontRight;
    private final WPI_TalonSRX backRight = RobotMap.driveBasebackRight;
    private final DifferentialDrive robotDrive = RobotMap.driveBaseRobotDrive;
    private final AHRS NavX = RobotMap.driveBasenavX;
    
    public double turnAngle;
    public double driveAngle;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	knife = NORMAL_POWER;
        NavX.reset();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    	getRobotDrive().arcadeDrive(Robot.oi.joystick.getRawAxis(1)*knife,-Robot.oi.joystick.getRawAxis(0)*knife);
    	
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public DifferentialDrive getRobotDrive() {
    	return robotDrive;
    }
    
    public void autoDrive(double speedLeft, double speedRight) {
    	getRobotDrive().tankDrive(speedLeft, speedRight);
    }
    
    public void kinfe() {
    
    	knife = KNIFE_VALUE;
    	
    }
    public void unKnife() {
    	
    	knife = NORMAL_POWER;
    	
    }
    public double getKnifeValue() {
    	return knife;
    }
    
    public double getYaw() {
    	return NavX.getYaw();
    }
    
    public void resetGyro() {
    	NavX.reset();
    }
    
    public void setTurnAngle(double angle) {
    	turnAngle = angle;
    }
    
    public void setDriveAngle(double angle) {
    	driveAngle = angle;
    }
}