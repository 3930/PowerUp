// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3930.PowerUp;

import org.usfirst.frc3930.PowerUp.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.AnalogTrigger;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc3930.PowerUp.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	// Joysticks
    public Joystick joystick;
    public Joystick joystick2;
    public Joystick buttonBoard;
    
    // Joystick 1 buttons
    public JoystickButton knifeButton;
    public JoystickButton unknifeButton;
    public JoystickButton b;
    public JoystickButton x;
    public JoystickButton start;
    public JoystickButton back;
    public Trigger lT;
    public Trigger rT;
    public Trigger hallMid;
    
    // Joystick 2 buttons
    public JoystickButton lB;
    public JoystickButton rB;

    // Button Board Buttons
    public JoystickButton rampButton;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	
    	//Controllers
    	
    	joystick2 = new Joystick(1);
        buttonBoard = new Joystick(2);
        joystick = new Joystick(0);
        
        //ButtonBoard
        rampButton = new JoystickButton(buttonBoard, 3);
        rampButton.whenPressed(new RampDeploySequence());
        
        //NOTE - due to wierdness with the solenoid on the piston, naming conventions for piston movement are
        //broken af. It works fine for now, but I may want to fix it in the morning.
        
        //Joystick 2
        
        //extend bumpers
        rB = new JoystickButton(joystick2, 6);
        rB.whenPressed(new rightPistonExtend());
        lB = new JoystickButton(joystick2, 5);
        lB.whenPressed(new leftPistonExtend());
        
        //Master extend/retract
        
        start = new JoystickButton(joystick2, 7);
        start.whenPressed(new allPistonExtend());
        back = new JoystickButton(joystick2, 8);
        back.whenPressed(new allPistonRetract());
        		
        //triggers
        lT = new Trigger() {
    		@Override
    		public boolean get() {
    			// TODO Auto-generated method stub
    			if (joystick2.getRawAxis(2) >= 0.5) {
    				return true;
    			}
    			else {
    				return false;
    			}
    		}
    	};
    	lT.whenActive(new leftPistonRetract());
    	
    	rT = new Trigger() {
    		
    		@Override
    		public boolean get() {
    			// TODO Auto-generated method stub
    			if (joystick2.getRawAxis(3) >= 0.5) {
    				return true;
    			}
    			else {
    				return false;
    			}
    		}
    	};
    	rT.whenActive(new rightPistonRetract());
    
    	//Joystick 1
    	
        knifeButton = new JoystickButton(joystick, 8);
        knifeButton.whenPressed(new Knife());
        unknifeButton = new JoystickButton(joystick, 7);
        unknifeButton.whenPressed(new unKnife());
        
        b = new JoystickButton(joystick, 2);
        b.whenPressed(new cameraOne());
        x = new JoystickButton(joystick, 3);
        //x.whenPressed(new cameraTwo());
        
        

        // SmartDashboard Buttons
        SmartDashboard.putData("Camera One", new cameraOne());
       // SmartDashboard.putData("Camera Two", new cameraTwo());
    
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }

    public Joystick getJoystick2() {
        return joystick2;
    }

    public Joystick getButton() {
        return buttonBoard;
    }
    
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

